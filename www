public class Customer {
    String firstName;
    public static int ID = 0;
    Transaction[] transactions;
    
    Customer(String name) {
        this.firstName = firstName;
        ID++;
    }
    
    public int debt() {
        int debt = 0;
        for(int i = 0; i < transactions.length; i++) {
            //ERROR HERE: I couldn't figure out how to parse a transaction into Payment or Order
            if (transactions[i] instanceof Payment) {
                debt = debt - ((Payment) transactions[i]).amount;
            }
            if (transactions[i] instanceof Order) {
                debt = debt + ((Order) transactions[i]).price;
            }
        }
        return debt;
    }
}

public class Date {
    public int day;
    public int month;
    public int year;
    
    Date(int month, int day, int year) {
        this.day = day;
        this.month = month;
        this.year = year;
    }
    
    public Date future(int days) {
        //does not take leap years into account
        switch(month) {
            //February; 28 days in month
            case 2:
                return addDays(days, 28);
            //April, June, September, November; 30 days in month
            case 4: case 6: case 9: case 11:
                return addDays(days, 30);
            //January, March, May, July, August, October, December; 31 days in month
            case 1: case 3: case 5: case 7: case 8: case 10: case 12:
                return addDays(days, 31);
            default:
                return null;
        }
    }
    
    private Date addDays(int daysLater, int daysInMonth) {
        int newMonth;
        int newDay;
        int newYear;
        if (this.day + daysLater > daysInMonth) {
            newMonth = this.month + 1;
            newDay = this.day + daysLater - daysInMonth;
            if (newMonth == 1) {newYear = this.year + 1;} else {newYear = this.year + 1;}
            return new Date(newMonth, newDay, newYear);
        }
        //executes if no month change
        newDay = this.day + daysLater;
        newMonth = this.month;
        newYear = this.year;
        return new Date(newMonth, newDay, newYear);
    }
}

public class Order {
    public String brand;
    public RepairLevel level;
    public int price;
    //public Date promiseDate() {return super.date}
    public Date completionDate = null;
    public String comment;
    
    Order(String brand, RepairLevel level, int price, String comment) {
        this.brand = brand;
        this.level = level;
        this.price = price;
        this.comment = comment;
    }
    
    public void resolve(Date currentDate) {
        completionDate = currentDate;
    }
    
    public boolean isComplete() {return (completionDate != null);}
}

public class Payment extends Transaction {
    public int amount;
    
    public Payment(Date date, Customer customer, int amount) {
        super(date, customer);
        this.amount = amount;
    }
    
}

public enum RepairLevel {
    silver, gold, platinum;
}

public class RepairPrice {
    private String brand;
    private RepairLevel level;
    public int price;
    public int daysToRepair;
    
    RepairPrice(String brand, RepairLevel level, int price, int daysToRepair) {
        this.brand = brand;
        this.level = level;
        this.price = price;
        this.daysToRepair = daysToRepair;     
    }
    
    public void newPrice(int price) {
        this.price = price;
    }
    
    public void newRepairTime(int daysToRepair) {
        this.daysToRepair = daysToRepair;
    }
}

public class Transaction {
    Date date;
    Customer customer;
    //int customerID;
    
    Transaction(Date date, Customer customer) {
        this.date = date;
        this.customer = customer;
        //customerID = customer.ID;
    }
}

public class WWW {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
    }
    
}
